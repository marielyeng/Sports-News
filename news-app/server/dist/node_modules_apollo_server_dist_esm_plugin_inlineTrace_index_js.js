"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "node_modules_apollo_server_dist_esm_plugin_inlineTrace_index_js";
exports.ids = ["node_modules_apollo_server_dist_esm_plugin_inlineTrace_index_js"];
exports.modules = {

/***/ "../../node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginInlineTrace: () => (/* binding */ ApolloServerPluginInlineTrace)\n/* harmony export */ });\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"../../node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n/* harmony import */ var _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../traceTreeBuilder.js */ \"../../node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internalPlugin.js */ \"../../node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var _schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"../../node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js\");\n\n\n\n\nfunction ApolloServerPluginInlineTrace(options = Object.create(null)) {\n    let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_2__.internalPlugin)({\n        __internal_plugin_id__: 'InlineTrace',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema, logger }) {\n            if (enabled === null) {\n                enabled = (0,_schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__.schemaIsSubgraph)(schema);\n                if (enabled) {\n                    logger.info('Enabling inline tracing for this subgraph. To disable, use ' +\n                        'ApolloServerPluginInlineTraceDisabled.');\n                }\n            }\n        },\n        async requestDidStart({ request: { http }, metrics }) {\n            if (!enabled) {\n                return;\n            }\n            const treeBuilder = new _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_1__.TraceTreeBuilder({\n                maskedBy: 'ApolloServerPluginInlineTrace',\n                sendErrors: options.includeErrors,\n            });\n            if (http?.headers.get('apollo-federation-include-trace') !== 'ftv1') {\n                return;\n            }\n            if (metrics.captureTraces === false) {\n                return;\n            }\n            metrics.captureTraces = true;\n            treeBuilder.startTiming();\n            return {\n                async executionDidStart() {\n                    return {\n                        willResolveField({ info }) {\n                            return treeBuilder.willResolveField(info);\n                        },\n                    };\n                },\n                async didEncounterErrors({ errors }) {\n                    treeBuilder.didEncounterErrors(errors);\n                },\n                async willSendResponse({ response }) {\n                    treeBuilder.stopTiming();\n                    if (response.body.kind === 'incremental') {\n                        return;\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    const encodedUint8Array = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.encode(treeBuilder.trace).finish();\n                    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n                    const extensions = response.body.singleResult.extensions ||\n                        (response.body.singleResult.extensions = Object.create(null));\n                    if (typeof extensions.ftv1 !== 'undefined') {\n                        throw new Error('The `ftv1` extension was already present.');\n                    }\n                    extensions.ftv1 = encodedBuffer.toString('base64');\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://server/../../node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js?");

/***/ })

};
;